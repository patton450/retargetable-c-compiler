Chapter 1: Introduction

1.1 - Literate Programs:

    This book, "A Retargetable C Compiler: Design and Implementation (1995)",
        is the implemenation of lcc. 
    The source consists of interleaved prose and labelled code fragments
    
        fragments contain source code and refrences to other fragments
        fragments will look like the following

            <a fragment label 1> =
                sum = 0;
                for( i = 0; i < 10; i++) <incrament sum 1>

            <incrament sum 1>=
                sum += x[i]

    Note: several framents may have the same name and <a fragment label 1> +=,
        will be used to that we are continuing the definition of a fragment

    Note: that the way that the authors will be showing the continued defintion
        of the fragemnts is by a doubly linked list.
        
            so a fragment will appear <some fragment> along with a pointer
                ^n means prev definition was on pg n
                vm means that next def is on pg m

1.2 - How to read the book:

    Authors suggest front to back and describe a few of the chapters

        Chapter 5: describes front/back end interface of the compiler
        Chapter 13-18: describes the backend of the compiler. notes that the
            front end and back end can be developed independetly of one another
            and that front/back ends can be replaced as long as interface
            remains
        Chapter 16-18: describes the modules for the target langauges, MIPS, 
            SPARC, and x86. notes that each chpater is self contained

    The book will use some fragments that are used but not shown, the disk
        however contains all the definitions

1.3 - Overview:

    lcc transfroms ANSI-C code into one of MIPS, SPARC, x86. It does this by
        having multiple stages where the code changes form.
    Note lcc includes neither a linker or an assembler
    The preprocessor, lexical analyzer, and parser comprise the front end,
        and the code generation is that backend.


                          SOURCE FILE
                               |
                               |
                               |
                               |
                               V
        +---------------------------------------------+
        |               PREPROCESSOR                  |
        |                                             |
        |       Expands macros, includes headers      |
        |          conditionally compiles code        |
        +---------------------------------------------+
                               |
                               |
                               |
                               |
                               V
        +---------------------------------------------+
        |               LEXICAL ANALYZER              |
        |                  (SCANNER)                  |
        |                                             |
        |       Turns the progam into tokens          |
        |                  Fig 1.1                    |
        |                                             |     
        |       Checks for syntax correctness         |
        +---------------------------------------------+
                               |
                               |
                               |
                               |
                               V
        +---------------------------------------------+
        |                   PARSER                    |
        |                                             |
        |       Checks for semantic correctness       |
        |                                             |
        | +-----------------------------------------+ |
        | |           ABSTRACT SYNTAX TREE          | |
        | |                 Fig 1.2                 | |
        | |                                         | |
        | |        Each represents one basic        | |
        | |                operation                | |
        | |                                         | |
        | |                                         | |                   
        | |     Node id is CMD+T, command+type      | |                   
        | |                                         | |                   
        | +-----------------------------------------+ |                   
        |                      |                      |
        |                      |                      |
        |                      V                      |
        | +-----------------------------------------+ |
        | |       DIRECTED ACYCLIC GRAPHS (DAG)     | |
        | |                 Fig 1.3                 | |
        | |                                         | |
        | |      Eliminates repeated instances of   | |
        | |             same expression             | |
        | |                                         | |
        | |      Nodes drop the + from above        | |
        | |                                         | |
        | |                                         | |
        | +-----------------------------------------+ |
        |                      |                      |
        |                      |                      |
        |                      V                      |
        | +-----------------------------------------+ |
        | |                CODE LIST                | |
        | |                 Fig 1.4                 | |
        | |                                         | |
        | |    Each entry represents one component  | |
        | |                                         | |
        | |       Blockbeg and Blockend denote      | |
        | |           component boundry             | |
        | |                                         | |
        | +-----------------------------------------+ |
        |                                             |
        +---------------------------------------------+
                               |
                               |
                               |
                               |
                               V
        +---------------------------------------------+
        |               CODE GENERATION               |
        |                                             |
        |                                             |
        |       No longer machine independent         |
        |                                             |
        |    Have to be replaced for new targets      |
        |                                             |
        |         Work by annotationg DAGS            |
        |                                             |
        +---------------------------------------------+
                               |
                               |
                               |
                               |
                               V
                        ASSEMBLY CODE

1.4 - Design

    The authors built lcc with the goal of reducing time spent for programming,         thus they might not always program with effcieny for computer in mind.

    although the book notes that "lcc is smaller and faster than most other 
        ANSI C compilers.", however that was in 1995. It would be interesting to
        see how this holds for todays compilers.

    lcc generates reasonably effecnt object code, also it is programed with
        local efficency in mind. Global optimizations are not a part of lcc
        design

    the code interface in chapter 5 allows lcc to be a cross-compiler. meaning 
        it can generate code for it's targets independent of the target machine
    
    each chapter will describe a module describedusing fragments as defined in
        chpater 1.1

        note: list.c, output.c, init.c, event.c, trace.c, prof.c, profio.c
            are used in the book, but are not implemented. So I will have
            to research those/implement by my self.

    pg 15) shows which chapters correspond to what modules 
    
1.5 - Common declerations

    this sections begins defining c.h and output.c

    defined comments for all feilds of the module as to break the file up
        better

    they describe how they will use pre-ANSI notation for function definitions
        I will not be doing that since it is _CURRENT_YEAR_

    on page 17 in they introduce varaiables bp, io, fd. however I do not know
        what types/hoe they are defined.

1.6 - Syntax Specifications

    They use grammers to specifiy syntax, grammers define langauges.

    made up of Terminals, Non-Terminals, and Producations
    
        Terminals are when the grammer termiates on a specific symbol
            (ie 'C', '1', 'a')

        Non-Terminals are a sequence of Terminals and NonTerminals.

        Productions take Non-Terminals and replaces them by one of their 
            rules.

1.7 - Errors
    there may be errors in this book  
